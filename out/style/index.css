body {
  background-attachment: fixed; }

body::before {
  content: "";
  display: block;
  width: 100%;
  height: 100%;
  position: absolute;
  background: #294a15; }

body, html, canvas {
  display: block;
  width: 100%;
  height: 100%;
  min-width: 1100px;
  min-height: 800px;
  margin: 0;
  padding: 0;
  top: 0;
  left: 0;
  user-select: none;
  -webkit-user-select: none;
  cursor: default;
  position: fixed;
  overflow: hidden;
  image-rendering: pixelated; }

canvas {
  height: auto;
  width: auto; }

guage {
  width: 48px;
  height: 256px;
  background: url("../../static/img/readout/magic.png");
  background-size: cover;
  background-repeat: no-repeat; }

#health, #magic {
  bottom: 50px;
  position: fixed;
  overflow: hidden;
  top: auto; }

#health {
  left: 50px; }

#magic {
  right: 50px; }

guage {
  --amt: 1;
  position: absolute;
  top: calc(256px * (1 - var(--amt)));
  background-position-y: calc(-256px * (1 - var(--amt))); }

guage[level="Level1"] {
  background-position-x: -48px; }

guage[level="Level2"] {
  background-position-x: -96px; }

guage[level="Level3"] {
  background-position-x: -144px; }

guage[level="Level4"] {
  background-position-x: -192px; }

guage[level="Health"] {
  background-position-x: -48px; }

.text {
  --size: 3;
  width: auto;
  min-height: calc(8px * var(--size));
  background: rgba(0, 0, 0, 0.5);
  margin: 4px;
  padding: 2px;
  position: relative; }
  .text .letter {
    display: inline-block;
    width: calc(8px * var(--size));
    height: calc(8px * var(--size));
    background-image: url("../../static/img/readout/fontcolor.png");
    background-size: calc(80px * var(--size)) calc(32px * var(--size));
    background-repeat: no-repeat;
    --tilex: 0;
    --tiley: 0;
    background-position: calc(-8px * var(--tilex) * var(--size)) calc(-8px * var(--tiley) * var(--size)); }
    .text .letter:not(:first-child) {
      margin-left: calc(-2px * var(--size)); }
    .text .letter.i {
      margin-right: calc(-3px * var(--size)); }
    .text .letter.space {
      background: none;
      margin-left: calc(-4px * var(--size)); }
  .text.colorless .letter {
    background-image: url("../../static/img/readout/font.png"); }
  .text.heal {
    filter: hue-rotate(210deg); }
  .text.damage {
    filter: hue-rotate(130deg); }
  .text.fight {
    filter: hue-rotate(180deg); }
  .text.good {
    filter: hue-rotate(250deg); }
  .text.bad {
    filter: hue-rotate(40deg); }
  .text.slide {
    position: fixed;
    animation: slide 1s linear forwards;
    background: none; }

#messages {
  position: fixed;
  top: 10px;
  left: 50px;
  right: 50px; }
  #messages .text {
    --size: 2; }

@keyframes slide {
  0% {
    margin-top: 0;
    opacity: 0; }
  30% {
    margin-top: -40px;
    opacity: 1; }
  70% {
    margin-top: -100px;
    opacity: 1; }
  100% {
    margin-top: -170px;
    opacity: 0; } }

#abilities {
  position: fixed;
  left: 50%;
  bottom: 50px;
  transform: translateX(-50%);
  width: 288px;
  height: 72px;
  background: url("../../static/img/readout/abilityslots.png");
  background-size: cover; }
  #abilities::after {
    content: "";
    width: 100%;
    height: 100%;
    position: absolute;
    top: 0;
    left: 0;
    background: url("../../static/img/readout/abilityslotnumbers.png");
    background-size: cover; }
  #abilities slot {
    width: 48px;
    height: 48px;
    margin-left: 12px;
    margin-right: 12px;
    margin-top: 12px;
    position: relative;
    display: block;
    float: left;
    background-size: cover !important; }
    #abilities slot[ability="Heal"] {
      background: url("../../static/img/readout/abilityheal.png"); }
    #abilities slot[ability="DarkHand"] {
      background: url("../../static/img/readout/abilitydarkhand.png"); }
    #abilities slot[ability="Fireball"] {
      background: url("../../static/img/readout/abilityfireball.png"); }
    #abilities slot[ability="Eraser"] {
      background: url("../../static/img/readout/abilityeraser.png"); }

body {
  --creepiness: 0; }

body::before, canvas {
  filter: saturate(calc(1 - var(--creepiness) * 0.7)) brightness(calc(1 - var(--creepiness) * 0.5)); }
